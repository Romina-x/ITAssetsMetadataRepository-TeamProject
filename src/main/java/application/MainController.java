package application;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

/**
 * This program handles HTTP requests to the application, specifically POST and GET.
 *
 * @author Jay Bryant (https://spring.io/guides/gs/accessing-data-mysql/)
 * @author Sarah Haines
 */

@Controller // This means that this class is a Controller
@RequestMapping(path = "/asset") // This means URL's start with /asset (after Application path)
public class MainController {

  @Autowired // This means to get the bean called assetRepository
  // Which is auto-generated by Spring, we will use it to handle the data
  private AssetRepository assetRepository;

  @PostMapping(path = "/add") // Map ONLY POST Requests
  public @ResponseBody String addNewAsset(@RequestParam String type, @RequestParam String title,
      @RequestParam String link, @RequestParam Integer lineNum, @RequestParam String progLang) {
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request

    Asset n = new Asset();
    n.setType(type);
    n.setTitle(title);
    n.setLink(link);
    n.setLineNum(lineNum);
    n.setProgLang(progLang);
    assetRepository.save(n);
    return "Saved";
  }


  @GetMapping(path = "/asset/all")
  public @ResponseBody Iterable<Asset> getAllAssets() {
    // This returns a JSON or XML with the assets
    return assetRepository.findAll();
  }

  // Create asset page
  @GetMapping("/createAsset") // GET request : When you go to localhost:8080/createAsset
  public String assetForm(Model model) {
    model.addAttribute("createAsset", new Asset()); // Gives the form an asset object to add
                                                    // attributes to
    return "createAsset"; // renders createAsset.html
  }

  @PostMapping("/createAsset") // POST request : When you submit the form
  public String assetSubmit(@ModelAttribute Asset asset, Model model) {
    assetRepository.save(asset); // Add the asset object to the database
    return "result"; // renders result.html
  }

}
